{"version":3,"sources":["App.module.css","check.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","_g","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgCheck","_ref","svgRef","title","titleId","props","id","xmlns","xmlnsXlink","x","y","viewBox","style","enableBackground","xmlSpace","ref","d","ForwardRef","StyledContainer","styled","div","StyledHeadlinePrimary","h1","StyledItem","StyledColumn","span","width","StyledButton","button","StyledButtonSmall","StyledButtonLarge","StyledSearchForm","form","StyledLabel","label","StyledInput","input","storiesReducer","state","action","type","isLoading","isError","data","payload","filter","story","objectID","Error","API_ENDPOINT","SearchForm","searchTerm","onSearchInput","onSearchSubmit","onSubmit","InputWithLabel","value","isFocused","onInputChange","disabled","inputRef","React","useRef","useEffect","current","focus","console","log","Fragment","htmlFor","children","onChange","className","styles","List","list","onRemoveItem","map","item","Item","href","url","author","num_comments","points","onClick","height","App","initialState","useState","localStorage","getItem","setValue","setItem","useSemiPersistentState","setSearchTerm","setUrl","useReducer","stories","dispatchStories","handleFetchStories","useCallback","a","axios","get","result","hits","toLowerCase","includes","event","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.658bf4de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1H_BH\",\"headline-primary\":\"App_headline-primary__3IAfL\",\"item\":\"App_item__1J6Z-\",\"button\":\"App_button__2D4H7\",\"buttonSmall\":\"App_buttonSmall__3HVkQ\",\"buttonLarge\":\"App_buttonLarge__ZJJy-\",\"searchForm\":\"App_searchForm__yqI5F\",\"label\":\"App_label__3Hf3_\",\"input\":\"App_input__B5Mr4\"};","var _g;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgCheck(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 297 297\",\n    style: {\n      enableBackground: \"new 0 0 297 297\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M113.636,272.638c-2.689,0-5.267-1.067-7.168-2.97L2.967,166.123c-3.956-3.957-3.956-10.371-0.001-14.329l54.673-54.703 c1.9-1.9,4.479-2.97,7.167-2.97c2.689,0,5.268,1.068,7.169,2.969l41.661,41.676L225.023,27.332c1.9-1.901,4.48-2.97,7.168-2.97l0,0 c2.688,0,5.268,1.068,7.167,2.97l54.675,54.701c3.956,3.957,3.956,10.372,0,14.328L120.803,269.668 C118.903,271.57,116.325,272.638,113.636,272.638z M24.463,158.958l89.173,89.209l158.9-158.97l-40.346-40.364L120.803,160.264 c-1.9,1.902-4.478,2.971-7.167,2.971c-2.688,0-5.267-1.068-7.168-2.97l-41.66-41.674L24.463,158.958z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgCheck);\nexport default __webpack_public_path__ + \"static/media/check.e7cb0596.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport cs from 'classnames';\r\nimport styles from './App.module.css';\r\nimport styled from 'styled-components'\r\n// import './App.css';\r\nimport { ReactComponent as Check } from './check.svg';\r\n\r\n\r\n\r\n\r\nfunction getTitle(title) {\r\n  return title;\r\n}\r\n\r\nconst StyledContainer = styled.div`\r\n  height: 100vw;\r\n  padding: 20px;\r\n\r\n  background: #83a4d4;\r\n  background: linear-gradient(to left, #b6fbff, #83a4d4);\r\n  color: #171212;\r\n`;\r\n\r\nconst StyledHeadlinePrimary = styled.h1`\r\n  font-size: 48px;\r\n  font-weight: 300;\r\n  letter-spacing: 2px;\r\n`;\r\n\r\nconst StyledItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 5px;\r\n`;\r\n\r\nconst StyledColumn = styled.span`\r\n  padding: 0 5px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  width: ${props => props.width};\r\n\r\n  a { color: inherit; }\r\n`;  // 이 때 a는 하위 요소임. StyledColumn 밑의 a\r\n\r\nconst StyledButton = styled.button`\r\n  background: transparent;\r\n  border: 1px solid #171212;\r\n  padding: 5px;\r\n  cursor: pointer;\r\n  transition: all .1s ease-in;\r\n\r\n  &:hover {\r\n    background: #171212;\r\n    color: #fff;\r\n  }\r\n`;  // &는 현재 요소(StyledButton이 렌더링될 요소)를 뜻함 \r\n\r\n// styled() 안에 스타일 컴포넌트를 넣어 상속받을 수도 있음\r\nconst StyledButtonSmall = styled(StyledButton)`padding: 5px;`;\r\nconst StyledButtonLarge = styled(StyledButton)`padding: 10px;`;\r\nconst StyledSearchForm = styled.form`\r\n  padding: 10px 0 20px 0;\r\n  display: flex;\r\n  align-items: baseline;\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  border-top: 1px solid #171212;\r\n  border-left: 1px solid #171212;\r\n  padding-left: 5px;\r\n  font-size: 24px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  border: none;\r\n  border-bottom: 1px solid #171212;\r\n  background-color: transparent;\r\n`;\r\n\r\n\r\nconst initialStories = [\r\n  {\r\n    title: 'React',\r\n    url: 'https://reactjs.org',\r\n    author: 'Jordan Walke',\r\n    num_comments: 3,\r\n    points: 4,\r\n    objectID: 0\r\n  },\r\n  {\r\n    title: 'Redux',\r\n    url: 'https://redux.js.org',\r\n    author: 'Dan Abramov, Andrew Clark',\r\n    num_comments: 2,\r\n    points: 5,\r\n    objectID: 1\r\n  }\r\n];\r\n\r\n// 요청이 성공하면 데이터를 반환하는 프로미스 반환 함수 생성\r\n// 요청이 처리된 객체는 이전 스토리 목록을 갖고 있음\r\n// (???) 프로미스 알아보자\r\nconst getAsyncStories = () =>\r\n  // Promise.resolve({ data: { stories: initialStories } });\r\n\r\n  // new Promise(resolve => \r\n  //   setTimeout(\r\n  //     () => resolve({ data: { stories: initialStories } }),\r\n  //     2000\r\n  //   ) // 2초 지연\r\n  // );\r\n\r\n  // 일부러 에러 만들기\r\n  new Promise((resolve, reject) => setTimeout(reject, 2000));\r\n\r\n\r\n\r\n\r\n  // useState와 useEffect 문장을 선언함. (아직 호출 전)\r\n// useState마냥 [상태, 상태 업데이트 함수 return]\r\n// 커스텀 훅은 use-접두사를 쓰고, 반환 값은 배열임\r\n// 이름 조정 이유는 62쪽\r\nconst useSemiPersistentState = (key, initialState) => {\r\n  // state와 상태 업데이트함수를 쌍으로 반환하는 useState 훅\r\n  const [value, setValue] = React.useState(\r\n    localStorage.getItem(key) || initialState\r\n  );\r\n\r\n  // 키가 외부에서 오기 때문에 키가 변경될 수도 있으므로\r\n  // key값이 변하면 useEffect가 새롭게 실행돼야 함\r\n  React.useEffect(\r\n    () => localStorage.setItem(key, value),\r\n    [value, key]\r\n  );\r\n\r\n  return [value, setValue];\r\n}\r\n\r\nconst storiesReducer = (state, action) => {\r\n  switch (action.type) {\r\n    // 처음 렌더링 시 최초 1회. 현재 data는 비어 있는 채로 놔두는 게 맞음\r\n    case 'STORIES_FETCH_INIT': \r\n      return {\r\n        ...state, //전개연산자. state는 data, isLoading, isError 프로퍼티를 가진 객체임\r\n        isLoading: true,\r\n        isError: false\r\n      };\r\n    // 비동기 데이터 가져오기 성공\r\n    case 'STORIES_FETCH_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        data: action.payload\r\n      };\r\n    // 비동기 데이터 가져오기 실패. 오류\r\n    case 'STOIRES_FETCH_FAILURE':\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true\r\n      }\r\n    // initialStories에서 객체 지우기\r\n    case 'REMOVE_STORY':\r\n      return {\r\n        ...state,\r\n        data: state.data.filter(\r\n          story => action.payload.objectID !== story.objectID\r\n        )\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nconst API_ENDPOINT = 'https://hn.algolia.com/api/v1/search?query=';\r\n\r\n{/* Search 컴포넌트가 진짜 Search하는 게 아니라서 이름을 바꿈.\r\n        대신 id와 label로 이게 뭐에 쓰려는 건지를 밝힘 \r\n        type을 바꿔 쓸 수도 있게 하기 위해 (ex. number, email) type도 넘김 \r\n\r\n        인데 '리액트 컴포넌트 구성'에서 type이랑 label을 빼버림\r\n        label prop을 사용하는 대신 컴포넌트 엘리먼트 태그 사이에 'Search' 텍스트 삽입\r\n        이것은 InputWithLabel에서 children prop으로 사용 가능 */}\r\n      {/* button onClick에 있던 handleSearchSubmit을 form에 onSubmit에 넣어버림 */}\r\nconst SearchForm = ({\r\n  searchTerm,\r\n  onSearchInput,\r\n  onSearchSubmit\r\n}) => (  \r\n  <StyledSearchForm onSubmit={onSearchSubmit}>\r\n    <InputWithLabel\r\n      id=\"search\"\r\n      value={searchTerm}\r\n      isFocused\r\n      onInputChange={onSearchInput}\r\n    >\r\n      <strong>Search: </strong>\r\n    </InputWithLabel>\r\n\r\n    <StyledButtonLarge\r\n      type=\"submit\" \r\n      disabled={!searchTerm}\r\n    >\r\n      Submit\r\n    </StyledButtonLarge>\r\n  </StyledSearchForm>\r\n);\r\n\r\nfunction App() {\r\n  const title = [1, 2, 3, 4, 5];\r\n\r\n  // key와 initialState를 보내고 상태와 상태 업데이트 함수를 받아옴\r\n  // 내가 key값을 달리 주면 로컬 스토리지에 뭐가 있느냐에 따라 초기 value는 달라질 수 있음\r\n  const [searchTerm, setSearchTerm] = useSemiPersistentState(\r\n    'search',\r\n    ''\r\n  );\r\n\r\n  // url도 상태로 만들어버림\r\n  const [url, setUrl] = React.useState(`${API_ENDPOINT}${searchTerm}`);\r\n  const handleSearchInput = event => setSearchTerm(event.target.value);\r\n  const handleSearchSubmit = event => {\r\n    setUrl(`${API_ENDPOINT}${searchTerm}`);\r\n    event.preventDefault();\r\n    // preventDefault가 없다면 /?로 리다이렉트되면서 페이지 전체가 새로고침됨\r\n  }\r\n\r\n  // 외부의 initialStories가 stories 상태 초기값이 됨\r\n  // -> '리액트 비동기 데이터' 장에서 빈 배열 사용으로 변경\r\n  // const [stories, setStories] = React.useState([]);\r\n\r\n  // useState를 useReducer로 교체해보기\r\n  // 리듀서에 디스패치를 통해 action을 보냄.\r\n  // action은 타입과 지정된 데이터와 함께 제공됨\r\n  // 이 상태에서 이미 stories 상태는 { data, isLoading, isError } 프로퍼티를 가진 객체임\r\n  const [stories, dispatchStories] = React.useReducer(\r\n    storiesReducer,\r\n    { data: [], isLoading: false, isError: false }\r\n  );\r\n\r\n  // '불가능한 상태' 챕터를 위해 isLoading과 isError를 reducer의 초기 상태로 통합함\r\n  // 초기 상태는 꼭 배열이 아니어도 됨\r\n\r\n  // // 로딩 중인지 보는 상태\r\n  // const [isLoading, setIsLoading] = React.useState(false);\r\n  // // 비동기 데이터에 오류가 있는지 보는 상태\r\n  // const [isError, setIsError] = React.useState(false);\r\n\r\n\r\n  const handleFetchStories = React.useCallback(async() => {\r\n    dispatchStories({ type: 'STORIES_FETCH_INIT' });\r\n\r\n    try {\r\n      const result = await axios.get(url);\r\n      \r\n      dispatchStories({\r\n        type: 'STORIES_FETCH_SUCCESS',\r\n        payload: result.data.hits\r\n      })\r\n    } catch {\r\n      dispatchStories({ type: 'STORIES_FETCH_FAILURE' });\r\n    }\r\n  }, [url]);\r\n\r\n\r\n  // 종속성 배열이 비었기 때문에 컴포넌트 최초 렌더링 시 1회만 실행\r\n  // getAsyncStories에서 반환받은 프로미스를 처리\r\n  // setStories로 stories 상태를 result 결과로 업데이트\r\n  /*\r\n  const handleFetchStories = React.useCallback(() => {\r\n    if (!searchTerm) return;  // 검색어 자리가 비었다면 그냥 끝\r\n\r\n    // setIsLoading(true); // 최초 렌더링 시 로딩중 true\r\n    // reducer에 맞게 고치기\r\n    dispatchStories({ type: 'STORIES_FETCH_INIT' });\r\n\r\n    // 기존 useState에서 쓰던 set 상태 업데이트 함수의\r\n    // 새로운 상태 값은 dispatch 함수 매개변수 객체의 payload로 넣어줌\r\n\r\n    axios\r\n      .get(url) //url 상태를 가져와서 검색\r\n      // .then(response => response.json())  // 응답을 JSON으로 변환\r\n      .then(result => { //변환 후 dispatch 함수 호출, payload로 전달\r\n        dispatchStories({\r\n          type: 'STORIES_FETCH_SUCCESS',\r\n          payload: result.hits\r\n        });\r\n      })\r\n      .catch(() => \r\n        dispatchStories({ type: 'STORIES_FETCH_FAILURE' })\r\n      );\r\n\r\n    /*\r\n    getAsyncStories()\r\n      .then(result => {\r\n        // setStories(result.data.stories);\r\n        // useReducer에 맞게 dispatch 함수 사용\r\n        dispatchStories({\r\n          type: 'STORIES_FETCH_SUCCESS',\r\n          payload: result.data.stories\r\n        });\r\n        // setIsLoading(false);  // 프로미스 결과 받은 후에는 false\r\n        \r\n      })\r\n      // .catch(() => setIsError(true));\r\n      // 이처럼 payload를 안 줄 수도 있음. 하지만 type은 주어져야 함\r\n      .catch(() => dispatchStories({ type: 'STORIES_FETCH_FAILURE' })\r\n      );\r\n      *\r\n  }, [url]);  // 종속성 배열에도 url 넣기\r\n  */\r\n\r\n\r\n  React.useEffect(() => {\r\n    handleFetchStories();\r\n  }, [handleFetchStories]); // useEffect는 함수가 변경될 때마다 실행\r\n\r\n\r\n\r\n  const handleRemoveStory = item => {\r\n    // 상태(리스트).filter를 해서 newStories는 새로운 리스트가 됨\r\n    // const newStories = stories.filter(\r\n    //   // 이 때 story는 stories 내의 객체. \r\n    //   // 인자 objectID와 story objectID가 다르면,\r\n    //   // 즉, 삭제하는 것과 objectID가 다른 것들만 담음\r\n    //   story => item.objectID !== story.objectID\r\n    // );\r\n    // setStories(newStories);\r\n\r\n    // 이것도 dispatch 함수 사용\r\n    dispatchStories({\r\n      type: 'REMOVE_STORY',\r\n      payload: item\r\n    });\r\n  }\r\n\r\n  // searchedStories는 배열임\r\n  // 어떻게 호출 없이 그냥 searchTerm이 바뀌는 걸 보고 매번 실행되는 걸까?\r\n  // 그건 includes 내에서 searchTerm을 쓰기 때문에\r\n  // input 내용이 바뀌면 handleSearch 실행 이후 stories.filter가 2번 실행됨. \r\n  // 왜 2번일까?\r\n  const searchedStories = stories.data.filter(\r\n    story => story.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  // JSX에서 자바스크립트는 { } 안에 쓸 수 있음\r\n  {/*<div className={styles.container}>*/}\r\n  return (\r\n    <StyledContainer>\r\n      <StyledHeadlinePrimary>\r\n        Hello {getTitle('React!')} {title}\r\n        {/* 그냥 JS 배열 자체를 넣으면 배열 안의 요소가 다 붙어서 나옴*/}\r\n      </StyledHeadlinePrimary>\r\n      \r\n      {/* 검색창과 버튼 */}\r\n      <SearchForm\r\n        searchTerm={searchTerm}\r\n        onSearchInput={handleSearchInput}\r\n        onSearchSubmit={handleSearchSubmit}\r\n      />\r\n\r\n      {/* 만약 isError가 true라면 <p> Something went wrong...</p> 출력.\r\n        Error가 아니라면 isError가 false라 JSX 내부 값이 {false}기 때문에 그냥 지나감 */}\r\n      {stories.isError && <p> Something went wrong... </p>}\r\n\r\n      {stories.isLoading ? (\r\n        <p>Loading ...</p>\r\n      ) : (\r\n        <List \r\n          list={stories.data} \r\n          onRemoveItem={handleRemoveStory}/>\r\n      )}\r\n    </StyledContainer>\r\n    // null  //null을 return하면 오류는 나지 않지만 빈 페이지가 나옴\r\n  );\r\n}\r\n\r\nfunction InputWithLabel(props) {\r\n  // https://react.vlpt.us/basic/10-useRef.html\r\n  // 특정 DOM 선택해야 할 때 useRef와 ref 사용 \r\n  // ref 객체를 만들고, 이 객체를 우리가 선택하고 싶은 DOM에 ref 값으로 설정해줘야 함\r\n  // 즉, <input ref={inputRef}> 이렇게 넘겨야 한다는 뜻\r\n  // 그럼 ref.current는 이 DOM을 가리키게 됨\r\n\r\n  // ref 생성\r\n  // ref 개체는 생명주기 동안 그대로 유지되는 지속적인 값\r\n  // ref 개체와 달리 변경될 수 있는 current가 프로퍼티로 포함됨\r\n\r\n  // useRef는 .current 프로퍼티로 전달된 기본값(여기서는 X)로 초기화된\r\n  // 변경 가능한 ref 객체를 반환함\r\n  // ref 객체는 컴포넌트 전 생애주기 동안 유지됨\r\n\r\n  // useRef는 .current 프로퍼티에 변경 가능한 값을 담은 컨테이너와 같음\r\n  // useRef는 매번 렌더링을 할 때 동일한 ref 객체 제공\r\n  // current 프로퍼티를 변경한다고 리렌더링이 발생되지는 않음\r\n  const inputRef = React.useRef();\r\n\r\n  // useEffect 종속성 배열 원소는 꼭 상태가 아니어도 됨?\r\n  React.useEffect(() => {\r\n    if (props.isFocused && inputRef.current) {\r\n      inputRef.current.focus(); //focus()가 DOM API\r\n    }\r\n  }, [props.isFocused]);\r\n\r\n  console.log(inputRef.current);\r\n\r\n\r\n  return (\r\n    // <React.Fragment>를 쓰면 같은 레벨에서 사용 가능\r\n    // return은 루트 컴포넌트 안에 하위 태그들을 넣어야지\r\n    // 루트 컴포넌트가 2개 이상 있으면 X\r\n    // event.target(input#search).value로 input값 접근 가능    \r\n    <React.Fragment>\r\n      <StyledLabel htmlFor={props.id}>\r\n        {props.children}\r\n      </StyledLabel>\r\n      &nbsp;\r\n      {/* ref가 JSX로 지정한 입력 필드의 ref 속성으로 전달\r\n        엘리먼트 인스턴스는 변경 가능한 current 속성에 할당 */}\r\n      <StyledInput\r\n        ref={inputRef}\r\n        id={props.id}\r\n        type={props.type || 'text'}\r\n        value={props.value}\r\n        // 엄밀히 말하면 상태값은 Search 컴포넌트에서 바꾸는 것이 아님\r\n        // input 값을 바꾸면 setSearchTerm이 실행되면서 거기서 바뀌는 것임\r\n        // 트리거 역할을 하는 것\r\n\r\n        //input에 onchange 프로퍼티가 원래 있긴 한데\r\n        //onchange=javascript function 이런 식으로 씀\r\n        onChange={props.onInputChange}\r\n        className={styles.input}\r\n      // 이렇게 되면 여러 InputWithLabel이 렌더링됐을 때\r\n      // 마지막 InputWithLabel에만 포커스가 주어짐\r\n      // autoFocus //선언형 방법.\r\n      // autoFocus={props.isFocused}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n// 컴포넌트 정의부\r\n// 인자 이름으로는 뭘 써도 괜찮음\r\nconst List = ({ list, onRemoveItem }) =>\r\n  /* key prop이 있어야 함. 콘솔을 살펴볼 것*/\r\n  list.map(item =>\r\n    <Item \r\n      key={item.objectID} \r\n      item={item} \r\n      onRemoveItem={onRemoveItem}\r\n    />\r\n  );\r\n\r\nconst Item = ({ item, onRemoveItem }) => {\r\n  // 인라인 핸들러 방식이 아닌 props 콜백 핸들러 방식\r\n  // const handleRemoveItem = () => onRemoveItem(item);\r\n\r\n  // 인라인 핸들러 구현을 위해 bind를 쓸 수 있음\r\n  // (???) bind 사용법\r\n  // \r\n  return (\r\n    <StyledItem>\r\n    {/*<div className=\"item\">*/}\r\n      {/* {{ }} 이렇게 쓰면 안의 것은 인라인 css 코드*/}\r\n      {/*<span style={{ width: '40%' }}>*/}\r\n      <StyledColumn width='40%'>\r\n        <a href={item.url}>{item.title}</a>\r\n      </StyledColumn>\r\n      <StyledColumn width='30%'>{item.author}</StyledColumn>\r\n      <StyledColumn width='10%'>{item.num_comments}</StyledColumn>\r\n      <StyledColumn width='10%'>{item.points}</StyledColumn>\r\n      <StyledColumn width='10%'>\r\n        {/* 1. bind 사용\r\n        <button type=\"button\" onClick={onRemoveItem.bind(null, item)}> \r\n        */}\r\n        {/* 2. 화살표 함수로 그냥 묶어주기 */}\r\n        {/* css 컴포넌트도 컴포넌트라서 그냥 type이랑 이런 거 쓸 수 있음\r\n          결과적으로 렌더링될 HTML 태그가 가진 프로퍼티들이면 괜찮음 */}\r\n        <StyledButtonSmall \r\n          type=\"button\" \r\n          onClick={() => onRemoveItem(item)}\r\n        >\r\n          <Check height=\"18px\" width=\"18px\" />\r\n        </StyledButtonSmall>\r\n      </StyledColumn>\r\n    </StyledItem>\r\n  )\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom'; //ReactDOM 사용을 위해 import\nimport './index.css';\nimport App from './App';\n// import App2 from './App2';\nimport reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render() 메소드로 HTML DOM 노드를 JSX로 바꿈 -> 리액트를 HTML로 통합\n//https://ko.reactjs.org/docs/strict-mode.html\n// ReactDOM.render(JSX, HTML 위치);\nReactDOM.render(\n  //StrictMode는 애플리케이션 내의 잠재적 문제를 알아내는 도구\n  //애플리케이션 어디에서든지 strict 모드 활성화 가능\n  //꼭 index.js나 render 함수 안이 아니더라도\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n  // public/index.html의 'root' id 엘리먼트를 App 컴포넌트로 대체\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}